// app.js
// Gesti√≥n de libros con Node.js usando POO y JSON
// Autor: Andrew Barbosa
// Fecha: 2025

const fs = require("fs");
const readline = require("readline");

// Clase Book: representa un libro
class Book {
    constructor(title, author, year, genre) {
        this.title = title;
        this.author = author;
        this.year = year;
        this.genre = genre;
    }
}

// Clase BookManager: maneja la colecci√≥n de libros
class BookManager {
    constructor(filename) {
        this.filename = filename;
        this.books = this.loadBooks();
    }

    // Cargar libros desde archivo JSON
    loadBooks() {
        if (fs.existsSync(this.filename)) {
            const data = fs.readFileSync(this.filename, "utf-8");
            return JSON.parse(data);
        }
        return [];
    }

    // Guardar libros en archivo JSON
    saveBooks() {
        fs.writeFileSync(this.filename, JSON.stringify(this.books, null, 2));
    }

    // Agregar libro
    addBook(book) {
        this.books.push(book);
        this.saveBooks();
        console.log("‚úÖ Libro agregado con √©xito.");
    }

    // Listar todos los libros
    listBooks() {
        if (this.books.length === 0) {
            console.log("üìö No hay libros en la colecci√≥n.");
            return;
        }
        this.books.forEach((book, index) => {
            console.log(`${index + 1}. ${book.title} - ${book.author} (${book.year}) [${book.genre}]`);
        });
    }

    // Buscar libro por t√≠tulo
    searchBook(title) {
        const found = this.books.filter(book => book.title.toLowerCase().includes(title.toLowerCase()));
        if (found.length === 0) {
            console.log("‚ùå No se encontraron libros con ese t√≠tulo.");
        } else {
            console.log("üîé Resultados de b√∫squeda:");
            found.forEach(book => {
                console.log(`- ${book.title} - ${book.author} (${book.year}) [${book.genre}]`);
            });
        }
    }

    // Eliminar libro por t√≠tulo
    removeBook(title) {
        const initialLength = this.books.length;
        this.books = this.books.filter(book => book.title.toLowerCase() !== title.toLowerCase());
        if (this.books.length < initialLength) {
            this.saveBooks();
            console.log("üóëÔ∏è Libro eliminado con √©xito.");
        } else {
            console.log("‚ùå No se encontr√≥ un libro con ese t√≠tulo.");
        }
    }
}

// Crear interfaz de consola
const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
});

const manager = new BookManager("books.json");

// Mostrar men√∫
function showMenu() {
    console.log("\n===== MEN√ö GESTI√ìN DE LIBROS =====");
    console.log("1. Agregar libro");
    console.log("2. Listar libros");
    console.log("3. Buscar libro por t√≠tulo");
    console.log("4. Eliminar libro por t√≠tulo");
    console.log("5. Salir");
    rl.question("üëâ Elige una opci√≥n: ", option => handleOption(option));
}

// Manejo de opciones
function handleOption(option) {
    switch (option) {
        case "1":
            rl.question("T√≠tulo: ", title => {
                rl.question("Autor: ", author => {
                    rl.question("A√±o: ", year => {
                        rl.question("G√©nero: ", genre => {
                            const book = new Book(title, author, year, genre);
                            manager.addBook(book);
                            showMenu();
                        });
                    });
                });
            });
            break;
        case "2":
            manager.listBooks();
            showMenu();
            break;
        case "3":
            rl.question("Ingrese t√≠tulo a buscar: ", title => {
                manager.searchBook(title);
                showMenu();
            });
            break;
        case "4":
            rl.question("Ingrese t√≠tulo a eliminar: ", title => {
                manager.removeBook(title);
                showMenu();
            });
            break;
        case "5":
            console.log("üëã Saliendo del programa...");
            rl.close();
            break;
        default:
            console.log("‚ö†Ô∏è Opci√≥n no v√°lida.");
            showMenu();
    }
}

// Iniciar programa
showMenu();
